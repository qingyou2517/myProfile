// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

// eslint-disable-next-line no-global-assign
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  return newRequire;
})({"svg.js":[function(require,module,exports) {
window._iconfont_svg_string_3784696 = '<svg><symbol id="icon-jianshu" viewBox="0 0 1024 1024"><path d="M684.7858875 603.54219192c-6.86566422 0-11.44277386 4.57710965-11.44277386 11.44277386v91.54219241c0 19.45271563-12.58705141 34.32832209-34.32832209 34.3283216H326.62706111c-20.59699316 0-42.33826385-14.87560598-42.33826386-34.32832159V316.32856476C284.28879725 296.87584864 306.03006793 283.14452021 326.62706111 283.14452021h312.38773044c21.74127069 0 34.32832209 14.87560598 34.32832209 34.32832159v160.1988361c0 6.86566422 4.57710965 11.44277386 11.44277387 11.44277387s11.44277386-4.57710965 11.44277386-11.44277387V317.47284181c0-32.03976703-22.88554823-57.21386983-57.21386981-57.21386984H326.62706111C294.58729407 260.25897198 261.40324951 283.14452021 261.40324951 316.32856476V706.52715819c0 34.32832209 34.32832209 57.21386983 65.2238116 57.21386984h312.38773045c34.32832209 0 57.21386983-25.1741028 57.21386982-57.21386983v-91.54219242c0-6.86566422-5.72138718-11.44277386-11.44277387-11.44277386z m75.52230842-128.15906859c-4.57710965-4.57710965-11.44277386-4.57710965-16.01988351 0L512 697.37293889c-4.57710965 4.57710965-4.57710965 11.44277386 0 16.01988353 4.57710965 4.57710965 11.44277386 4.57710965 16.01988351 0l232.28831241-221.98981557c3.43283211-3.43283211 3.43283211-11.44277386-1e-8-16.01988352zM570.35814736 409.01503422h-183.08438384c-6.86566422 0-11.44277386 4.57710965-11.44277435 11.44277386s4.57710965 11.44277386 11.44277435 11.44277386h183.08438384c6.86566422 0 11.44277386-4.57710965 11.44277387-11.44277386s-5.72138718-11.44277386-11.44277387-11.44277386z m0 114.42773964h-183.08438384c-6.86566422 0-11.44277386 4.57710965-11.44277435 11.44277437s4.57710965 11.44277386 11.44277435 11.44277387h183.08438384c6.86566422 0 11.44277386-4.57710965 11.44277387-11.44277387s-5.72138718-11.44277386-11.44277387-11.44277437z" fill="#666666" ></path></symbol><symbol id="icon-yuque" viewBox="0 0 1024 1024"><path d="M293.15749359 613.88961029c-0.07724763 0.07724763-0.15449524 0.23174287-0.23174286 0.30899048 3.01265717-3.39889526 6.17980958-6.95228576 9.26971435-10.42842865-5.79357148 6.48880005-9.0379715 10.11943818-9.03797148 10.11943816z" fill="#1590E9" ></path><path d="M807.08590698 346.76734161l19.77539063-11.66439056c8.03375244-4.7121048 7.02953339-16.60823823-1.62220002-20.00713347l-9.50145721-3.70788575c-13.90457153-5.484581-26.41868591-14.05906677-36.07463837-25.49171448-12.12787628-14.29080964-34.52968597-34.83867646-70.21808624-46.96655273-40.70949555-13.90457153-110.38684845-11.12365723-149.24240112-8.11100007-12.28237152 0.92697143-19.3119049 14.21356201-13.44108582 25.10547639 32.90748596 60.71662903 12.90035248 88.29402924-4.40311432 108.68740081-26.49593354 31.20803833-75.23918151 86.67182922-124.13692474 141.82662963 16.9172287-18.92566681 32.289505-36.15188599 44.88086701-50.28820037 28.11813354-31.51702881 70.52707673-47.50728607 112.08629608-39.93701935 132.47966767 24.17850495 147.54295349 195.74546814-7.10678101 297.86682129 20.16162873-1.08146667 40.63224791-2.54917146 61.18011474-4.63485717 195.12748718-20.0843811 210.57701111-179.29172516 168.3998108-257.92980195-14.98603821-27.88639069-17.14897156-46.73480988-15.52677156-64.81075287 1.54495239-16.60823823 10.66017151-31.51702881 24.95098115-39.93701935z" fill="#99C236" ></path><path d="M280.87512207 660.70166779C302.73619842 636.29141998 360.59466553 571.48066711 418.29863739 506.36092377c-42.17720032 47.27554321-94.08760071 105.59749604-137.42351532 154.34074402z" fill="#1590E9" ></path><path d="M283.57878875 702.49262999c-15.06328583-1.9311905-21.78382873-19.77539063-11.97338104-31.36253356-39.93701935 45.03536225-70.8360672 79.95128631-76.55239105 86.98081971-18.61667633 22.78804779 191.34235383 75.62541962 372.79701233-43.87664796 0.07724763-0.07724763 0.23174287-0.15449524 0.30899048-0.23174285-120.89252471 6.33430481-230.58414459-4.55760956-284.58023071-11.50989534z" fill="#CAC134" ></path><path d="M575.26580048 416.13570403c-41.55921936-7.57026672-83.96816254 8.41999055-112.08629607 39.93701936-12.59136201 14.05906677-27.96363831 31.28528595-44.88086702 50.28820038C360.59466553 571.48066711 302.73619842 636.29141998 280.87512207 660.70166779c-3.16715241 3.5533905-6.25705719 7.02953339-9.26971436 10.42842864-9.81044769 11.50989533-3.08990479 29.35409546 11.97338105 31.36253356 53.99608612 6.95228576 163.68770599 17.84420014 284.50298309 11.58714296 154.6497345-102.19860078 139.66369629-273.76556396 7.18402863-297.94406892z" fill="#029F40" ></path></symbol><symbol id="icon-github" viewBox="0 0 1024 1024"><path d="M512 164.38571167C320.05430628 164.38571167 164.48214816 323.89640555 164.48214816 520.73630951c0 157.39662734 99.56386438 290.95932202 237.67325076 338.0769499 17.37589263 3.27245992 23.74705353-7.73227248 23.74705351-17.17317375 0-8.45626749-0.31855794-30.87116938-0.49231755-60.61290533-96.66788227 21.5461065-117.08455601-47.78370438-117.08455601-47.78370436-15.78310222-41.12294615-38.57448126-52.069758-38.57448193-52.0697587-31.56620514-22.1253032 2.40366522-21.69090619 2.40366523-21.6909055 34.86762432 2.51950428 53.19919146 36.72105278 53.19919144 36.72105278 31.01596838 54.44446329 81.34813699 38.7482402 101.15665478 29.59693693 3.15662018-23.02305784 12.16312511-38.71928093 22.06738333-47.63890539-77.17792311-8.97754432-158.29438197-39.53015575-158.2943813-176.07571166 0-38.89303987 13.5242367-70.71988309 35.76537895-95.62532864-3.56205792-9.00650425-15.49350421-45.23524016 3.38829898-94.29317767 0 0 29.19149986-9.55674101 95.56740944 36.51833459 27.74350847-7.90603143 57.45628514-11.84456649 87.02426215-11.98936617 29.5100578 0.144799 59.25179372 4.08333474 86.99530219 11.98936617 66.3179904-46.10403486 95.45157038-36.51833458 95.45157039-36.51833459 18.96868302 49.05793683 7.06619665 85.28667274 3.47517811 94.29317767 22.29906214 24.90544624 35.70745909 56.73228944 35.70745908 95.62532864 0 136.86411384-81.23229793 167.01128754-158.64189916 175.8150736 12.45272311 11.00473172 23.57329459 32.72459784 23.57329457 65.99943176 0 47.63890538-0.43439701 86.03962837-0.43439769 97.73939587 0 9.52778107 6.25532115 20.61939262 23.89185254 17.11525455 137.9935473-47.20450837 237.47053255-180.68032325 237.47053188-338.0190307C859.51785184 323.89640555 703.91673377 164.38571167 512 164.38571167" fill="#3E75C3" ></path></symbol><symbol id="icon-address" viewBox="0 0 1024 1024"><path d="M512.86903572 791.7570825c-77.05450058 0-149.6189833-6.66260717-204.44065328-18.90152698-64.38106302-14.41150906-99.50458999-34.39933066-95.59392932-60.32556293 2.67952675-18.10491084 14.12183047-26.94010736 42.36549139-37.36853597 23.60880382-8.69035719 70.10221482-19.69814302 107.54317044-25.78139307 8.69035719-1.44839292 15.4978037 3.91066075 16.94619656 12.52859828 1.44839292 8.69035719-4.63485718 15.20812513-13.25279472 16.65651801-32.1543217 5.2142143-76.6199827 15.06328583-95.59392932 22.59492877-21.00169659 8.32825892-18.97394657 10.71810725-18.97394656 12.31133933 0 1.30355363 0.43451785 6.44534826 14.77360728 13.1803751 13.90457153 6.5177679 34.03723241 12.60101795 58.22539326 17.74281267 51.92488441 10.86294654 119.9269295 16.87377686 191.69479608 16.87377689 71.69544698 0 139.76991177-6.01083043 191.69479606-16.87377689 24.26058053-5.06937504 44.39324143-11.2250447 58.22539331-17.74281267 14.41150906-6.66260717 11.73198226-11.73198226 12.31133936-12.89069653-0.72419645-1.44839292-2.67952675-4.27275895-23.68122336-12.52859833-18.97394657-7.53164292-59.67378618-17.16345546-91.75568817-22.37766979-8.69035719-1.44839292-14.70118761-7.45922326-13.3252144-16.14958046 1.44839292-8.69035719 8.98003581-14.70118761 17.67039299-13.32521438 37.44095563 6.01083043 78.93741126 17.59797337 102.83589363 25.70897339 28.46091988 9.63181258 39.68596461 19.26362515 42.43791106 37.51337528 3.91066075 25.92623235-31.28528596 45.98647358-95.7387686 60.2531433-54.74925049 12.23891975-127.3137331 18.9015269-204.36823369 18.90152698z" fill="#3259CE" ></path><path d="M511.13096428 212.32751558c-97.11474175 0-173.44504597 78.50289345-173.30020667 175.54521561 0 2.89678578 0.07241965 5.93841076 0.21725894 8.90761616 1.01387501 20.71201806 7.38680362 41.42403603 15.49780366 60.3979827v0.07241955l12.9631162 24.98477699c1.08629466 2.1001697 107.68800974 200.74725151 119.56483124 219.50393913 6.66260717 10.50084832 17.81523222 14.99086619 25.70897341 14.99086621 7.67648218 0 19.98782161-4.12791966 25.56413412-14.99086621 8.90761619-17.38071451 127.3137331-219.50393918 127.31373307-219.50393913s11.0077858-18.97394657 13.54247336-25.05719654c9.70423226-22.95702694 13.6873126-35.63046454 14.70118757-60.61524171 0.07241965-2.60710715 0.14483922-6.80744645 0.14483935-8.90761606C692.97668891 290.3958912 608.24570608 212.32751558 511.13096428 212.32751558z m1.73807144 267.15606445c-53.73537541 0-97.25958109-43.52420567-97.25958112-97.259581 0-53.73537541 43.52420567-97.25958109 97.25958112-97.25958111 53.73537541 0 97.25958109 43.52420567 97.25958112 97.25958111 0 53.73537541-43.52420567 97.25958109-97.25958112 97.259581z" fill="#3259CE" ></path></symbol><symbol id="icon-phone" viewBox="0 0 1024 1024"><path d="M657.07575935 777.32192637c-26.24842553 0-55.68922795-4.9659186-86.54886362-14.54304664-74.13406779-23.05604995-147.20401017-71.29640003-205.7309059-135.85333976C277.18300147 530.09013137 235.32740323 433.60943123 243.48569739 347.76998387c2.4829593-21.2825076 9.22241959-48.24035007 41.1461813-69.87756612 24.47488386-19.86367371 52.49685172-31.21434413 74.48877628-30.85963566 23.05604995 0.35470848 30.85963566 8.51300331 54.62510254 42.91972367 36.53497119 50.36860089 39.01793049 75.19819321 37.59909594 89.38653139-2.4829593 23.41075844-15.25246359 33.69730342-26.95784247 42.919723-2.83766776 2.12825082-5.67533554 4.61121012-8.15829418 6.73946095-14.18833818 18.09013137-31.56905258 43.27443214 42.91972301 120.24616703 63.49281365 61.00985437 97.89953402 68.45873225 112.44258133 67.39460684 11.3506704-0.70941695 15.60717205-6.73946095 17.38071443-8.86771177l0.35470847-0.35470781c23.7654669-33.34259495 31.56905258-41.50088978 54.27039339-45.0479745 21.99192455-3.54708472 33.34259495 3.54708472 80.1641118 32.98788647 42.21030673 26.60313399 61.71927129 44.33855689 57.46277033 72.36052543-1.41883389 30.50492717-24.82959231 72.00581697-51.07801852 90.80536528-18.09013137 12.41479582-43.27443214 18.79954831-73.06994169 18.79954831z" fill="#16C4AF" ></path></symbol><symbol id="icon-weixin" viewBox="0 0 1024 1024"><path d="M274.01427237 647.82969222c-3.02684561 0-6.05369124-0.75671141-8.32382545-2.64848991-4.54026844-3.40520133-6.81040266-8.70218116-5.67533481-13.99916028l9.45889183-55.99664183C240.34061629 541.89009907 224.44967748 500.64932964 224.44967748 457.89513669 224.44967748 353.09061136 319.41695454 267.96058114 436.70721805 267.96058114c55.61828614 0 108.20972665 19.29614013 148.31542968 54.10486331 40.10570303 35.1870789 62.80704448 82.4815403 63.9421116 132.8028466 0 4.16191271-1.51342282 7.94546976-4.54026843 10.59395968s-6.81040266 4.16191271-10.97231538 4.16191201c-3.78355703-0.37835571-6.81040266-0.37835571-9.83724755-0.3783557-81.34647321 0-147.18036258 57.88842035-147.18036258 129.39764528 0 9.83724756 1.13506711 19.67449582 3.78355703 29.51174407 1.13506711 4.16191271 0.37835571 8.32382546-1.89177852 11.72902607-2.27013421 3.40520133-6.05369124 5.67533554-10.21560399 6.43204695-10.21560324 1.51342282-20.80956293 2.27013421-31.40352186 2.27013422-38.21392453 0-75.67113766-9.08053686-108.20972664-26.48489847l-47.6728171 24.97147565c-2.27013421 0-4.54026844 0.75671141-6.81040193 0.75671141z" fill="#0B9682" ></path><path d="M361.03608039 396.60151501m-25.34983064 0a25.34983136 25.34983136 0 1 0 50.699662 0 25.34983136 25.34983136 0 1 0-50.699662 0Z" fill="#DCFFFA" ></path><path d="M512 396.60151501m-25.34983136 0a25.34983136 25.34983136 0 1 0 50.69966272 0 25.34983136 25.34983136 0 1 0-50.69966272 0Z" fill="#DCFFFA" ></path><path d="M756.41777458 756.41777458c-2.27013421 0-4.54026844-0.37835571-6.81040267-1.51342281l-37.83556882-19.67449583c-26.86325417 13.99916028-57.13170895 21.56627433-88.53523082 21.56627433-97.23741199 0-175.93539526-71.13086923-175.93539526-158.15267795S526.37751598 440.11241938 623.23657227 440.11241938 799.55032252 511.24328859 799.55032252 598.2650966c0 34.80872321-12.86409317 68.860735-36.70050173 96.48070059l7.56711405 44.64597148c0.75671141 5.29697984-1.13506711 10.97231465-5.67533554 13.99916027-2.27013421 2.27013421-5.29697984 3.02684561-8.32382473 3.02684563z" fill="#16C4AF" ></path><path d="M558.53774927 558.15939428m-21.5662736 0a21.56627433 21.56627433 0 1 0 43.13254794 0 21.56627433 21.56627433 0 1 0-43.13254794 0Z" fill="#DCFFFA" ></path><path d="M688.31375025 558.15939428m-21.56627361 0a21.56627433 21.56627433 0 1 0 43.13254794 0 21.56627433 21.56627433 0 1 0-43.13254794 0Z" fill="#DCFFFA" ></path></symbol><symbol id="icon-email" viewBox="0 0 1024 1024"><path d="M684.53666211 344.91854733h-345.52444414l172.76222207 178.93230144L684.53666211 344.91854733zM287.63347783 346.68662713V679.08145267h448.73304433V346.21939577L525.51151904 564.60499866a19.09502317 19.09502317 0 0 1-0.47379526 0.47379527c-7.58669139 7.32473154-19.67503449 7.11289613-27.00036274-0.47379527L287.63347783 346.68662713zM263.76469888 301.95474522h496.47060224c10.54582328 0 19.09502317 8.54919991 19.09502316 19.09502316v381.90046324c0 10.54582328-8.54919991 19.09502317-19.09502316 19.09502316H263.76469888c-10.54582328 0-19.09502317-8.54919991-19.09502316-19.09502316V321.04976838c0-10.54582328 8.54919991-19.09502317 19.09502316-19.09502316z" fill="#5090F1" ></path></symbol></svg>', function (i) {
  var t = (t = document.getElementsByTagName("script"))[t.length - 1],
      e = t.getAttribute("data-injectcss"),
      t = t.getAttribute("data-disable-injectsvg");if (!t) {
    var c,
        _l,
        n,
        o,
        a,
        d = function d(t, e) {
      e.parentNode.insertBefore(t, e);
    };if (e && !i.__iconfont__svg__cssinject__) {
      i.__iconfont__svg__cssinject__ = !0;try {
        document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>");
      } catch (t) {
        console && console.log(t);
      }
    }c = function c() {
      var t,
          e = document.createElement("div");e.innerHTML = i._iconfont_svg_string_3784696, (e = e.getElementsByTagName("svg")[0]) && (e.setAttribute("aria-hidden", "true"), e.style.position = "absolute", e.style.width = 0, e.style.height = 0, e.style.overflow = "hidden", e = e, (t = document.body).firstChild ? d(e, t.firstChild) : t.appendChild(e));
    }, document.addEventListener ? ~["complete", "loaded", "interactive"].indexOf(document.readyState) ? setTimeout(c, 0) : (_l = function l() {
      document.removeEventListener("DOMContentLoaded", _l, !1), c();
    }, document.addEventListener("DOMContentLoaded", _l, !1)) : document.attachEvent && (n = c, o = i.document, a = !1, h(), o.onreadystatechange = function () {
      "complete" == o.readyState && (o.onreadystatechange = null, s());
    });
  }function s() {
    a || (a = !0, n());
  }function h() {
    try {
      o.documentElement.doScroll("left");
    } catch (t) {
      return void setTimeout(h, 50);
    }s();
  }
}(window);
},{}],"C:\\Users\\Administrator\\AppData\\Local\\Yarn\\Data\\global\\node_modules\\parcel\\src\\builtins\\hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';

var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };

  module.bundle.hotData = null;
}

module.bundle.Module = Module;

var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = '' || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + '49678' + '/');
  ws.onmessage = function (event) {
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      console.clear();

      data.assets.forEach(function (asset) {
        hmrApply(global.parcelRequire, asset);
      });

      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          hmrAccept(global.parcelRequire, asset.id);
        }
      });
    }

    if (data.type === 'reload') {
      ws.close();
      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');

      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);

      removeErrorOverlay();

      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);
  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID;

  // html encode message and stack trace
  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;

  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';

  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;
  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];
      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;
  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAccept(bundle, id) {
  var modules = bundle.modules;
  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAccept(bundle.parent, id);
  }

  var cached = bundle.cache[id];
  bundle.hotData = {};
  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);

  cached = bundle.cache[id];
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAccept(global.parcelRequire, id);
  });
}
},{}]},{},["C:\\Users\\Administrator\\AppData\\Local\\Yarn\\Data\\global\\node_modules\\parcel\\src\\builtins\\hmr-runtime.js","svg.js"], null)
//# sourceMappingURL=/svg.07eef95e.map